package com.shopme.admin.category;

import static org.assertj.core.api.Assertions.assertThat;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.shopme.common.entity.Category;

@ExtendWith(MockitoExtension.class)
@ExtendWith(SpringExtension.class)
public class CategoryServiceTests {
	
	// Kiem tra tang service su dung tang repository duoc mock 
	// de co the kiem thu ma khong can thuc su thao tac tren database.
	
	@MockBean
	private CategoryRepository repo; // tao 1 mock bean phien ban gia mao
	
	@InjectMocks
	private CategoryService service; // tiem mock tang service de kiem thu phuong thuc checkUnique cua no 
	
	@Test
	public void testCheckUniqueInNewModelReturnDuplicateName() {

		Integer id = null;
		String name = "Computers";
		String alias = "abc";
		
		Category category = new Category(id, name, alias);
		
		Mockito.when(repo.findByName(name)).thenReturn(category);
		Mockito.when(repo.findByAlias(alias)).thenReturn(category);
		
		String result = service.checkUnique(id, name, alias);
		
		assertThat(result).isEqualTo("DuplicateName");
	}
	
	
	// Phuong thuc nay dung de memo.
	@Test
	public void testCheckUniqueInNewModelReturnDuplicateNameV0() {
		// chuan bi du lieu cho kiem thu
		Integer id = null;
		String name = "Computers";
		String alias = "abc";
		
		Category category = new Category(id, name, alias); // tao du lieu gia
		
		// gia lap khi goi findByName(name) thi se tra ra category nhu
		// dang tuong tac voi database that. Nhung thuc te th√¨ KHONG.
		Mockito.when(repo.findByName(name)).thenReturn(category);
		
		String result = service.checkUnique(id, name, alias);
		
		assertThat(result).isEqualTo("DuplicateName");
	}
}
