package com.shopme.admin.user;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.shopme.common.entity.Role;
import com.shopme.common.entity.User;

@Controller
public class UserController {

	@Autowired
	private UserService service;

	@GetMapping("/users")
	public String listAll(Model model) {
		List<User> listUsers = service.listAll();

		model.addAttribute("listUsers", listUsers);
		return "users";
	}

	@GetMapping("/users/new")
	public String newUser(Model model) {
		
		List<Role> listRoles = service.listRoles();
		
		User user = new User();
		user.setEnabled(true);
		
		model.addAttribute("user", user);
		model.addAttribute("listRoles", listRoles);
		model.addAttribute("pageTitle", "Create new user");
		return "user_form";
	}

	@PostMapping("/users/save")
	public String saveUser(User user, RedirectAttributes redirectAttributes) {
		System.out.println(user);
		service.save(user);
	
		redirectAttributes.addFlashAttribute("message", "The user has been saved successfully.");
		return "redirect:/users";
	}
	
	@GetMapping("/users/edit/{id}")
	public String editUser(@PathVariable("id") Integer id, 
						   RedirectAttributes redirectAttributes,
						   Model model) {
		try {
			User user = service.get(id);
			List<Role> listRoles = service.listRoles();
			
			model.addAttribute("user", user);
			model.addAttribute("pageTitle", "Edit user (ID: " + id + ")");
			model.addAttribute("listRoles", listRoles);
			
			return "user_form";
		} catch (UserNotFoundException e) {
			redirectAttributes.addFlashAttribute("message", e.getMessage());
		}
		
		return "redirect:/users";
	}
	
	@GetMapping("/users/delete/{id}")
	public String deleteUser(@PathVariable("id") Integer id, 
			   RedirectAttributes redirectAttributes,
			   Model model) {
		
		try {
			service.delete(id);
			redirectAttributes.addFlashAttribute("message", 
					"The user ID " + id + " has been deleted successfully");	
		} catch (UserNotFoundException e) { // bắt exception UserNotFoundException được throw ra từ service.delete(id); nếu service.delete(id) gặp lỗi
			redirectAttributes.addFlashAttribute("message", e.getMessage());		
		}
		return "redirect:/users";
	}
	
	
	
	//addFlashAttribute là một phương thức trong interface RedirectAttributes trong Spring Framework, 
	//được sử dụng để chuyển dữ liệu từ một request sang một request khác thông qua redirect. 
	//Thông thường, khi bạn chuyển từ một trang (controller) sang trang khác bằng cách sử dụng redirect, 
	//dữ liệu không thể trực tiếp được chuyển theo dạng model attribute, 
	//vì redirect tạo ra một request mới.
}
