package com.shopme.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

	@Bean
	public UserDetailsService userDetailsService() {
		return new ShopmeUserDetailsSerivice();
	}

	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	public DaoAuthenticationProvider authenticationProvider() {
		DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
		
		authProvider.setUserDetailsService(userDetailsService());
		authProvider.setPasswordEncoder(passwordEncoder());
		
		return authProvider;
	}
	

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.authenticationProvider(authenticationProvider());
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests(requests -> requests
        		.antMatchers("/users/**").hasAuthority("Admin") // tranh nguoi dung khong phai Admin nhung co tinh gọi url .../users/...
        		.antMatchers("/categories/**").hasAnyAuthority("Admin", "Editor")
        		.antMatchers("/products", "/products/", "/products/detail/**", "/products/page/**")
        			.hasAnyAuthority("Admin", "Editor", "Salesperson", "Shipper")
        		.antMatchers("/products/new", "/products/delete/**").hasAnyAuthority("Admin", "Editor")
        		.antMatchers("/products/edit/**", "/products/save", "/products/check_unique").hasAnyAuthority("Admin", "Editor", "Salesperson")
        		.anyRequest().authenticated())
                .formLogin(login -> login.loginPage("/login")
                                .usernameParameter("email") // v? spring security m?c ??nh																// form login
                                .permitAll()                // n?n ta c?n set l?i l? email, v? ta mu?n d?ng email thay cho username.
                )
                .logout(logout -> logout.permitAll())
                .rememberMe(rem -> rem       // khi click vào Remember Me -> lưu thông tin vào cookie
                		.key("Abcdefdjfodj4395297dgdfjdo") // set cứng key vào để cả khi restart lại thì vẫn giữ nguyên trạng thái đăng nhập rồi
                		.tokenValiditySeconds(7 * 24 * 60 * 60)); // set thời hạn 1 tuần 
	}

	@Override
	public void configure(WebSecurity web) throws Exception {
		web.ignoring().antMatchers("/images/**", "/js/**", "/webjars/**");
	}
}
